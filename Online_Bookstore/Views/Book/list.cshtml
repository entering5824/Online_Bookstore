@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Books";
    var books = ViewBag.Books as List<Online_Bookstore.Models.Book>;
    var currentUser = Session["CurrentUser"] as Online_Bookstore.Models.User;
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h2 mb-0">
                        <i class="fas fa-book me-2 text-primary"></i>Books
                    </h1>
                    <p class="text-muted">Manage and explore our book collection</p>
                </div>
                @if (currentUser != null && (currentUser.Role == "ADMIN" || currentUser.Role == "LIBRARIAN"))
                {
                    <a href="@Url.Action("AddBook", "Book")" class="btn btn-primary">
                        <i class="fas fa-plus me-2"></i>Add Book
                    </a>
                }
            </div>
        </div>
    </div>

    <!-- Search and Filter Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    @using (Html.BeginForm("SearchBooks", "Book", FormMethod.Get, new { @class = "row g-3" }))
                    {
                        <div class="col-md-3">
                            <label for="title" class="form-label">Title</label>
                            <input type="text" name="title" id="title" class="form-control" placeholder="Search by title" />
                        </div>
                        <div class="col-md-3">
                            <label for="author" class="form-label">Author</label>
                            <input type="text" name="author" id="author" class="form-control" placeholder="Search by author" />
                        </div>
                        <div class="col-md-3">
                            <label for="isbn" class="form-label">ISBN</label>
                            <input type="text" name="isbn" id="isbn" class="form-control" placeholder="Search by ISBN" />
                        </div>
                        <div class="col-md-3">
                            <label for="category" class="form-label">Category</label>
                            <input type="text" name="category" id="category" class="form-control" placeholder="Search by category" />
                        </div>
                        <div class="col-12">
                            <button type="submit" class="btn btn-outline-primary">
                                <i class="fas fa-search me-2"></i>Search
                            </button>
                            <a href="@Url.Action("ListBooks", "Book")" class="btn btn-outline-secondary">
                                <i class="fas fa-refresh me-2"></i>Reset
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- View Options -->
    <div class="row mb-3">
        <div class="col-md-6">
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-outline-primary active" id="gridViewBtn">
                    <i class="fas fa-th me-2"></i>Grid View
                </button>
                <button type="button" class="btn btn-outline-primary" id="tableViewBtn">
                    <i class="fas fa-list me-2"></i>Table View
                </button>
            </div>
        </div>
        <div class="col-md-6 text-end">
            <div class="d-flex justify-content-end align-items-center gap-2">
                <label for="sortSelect" class="form-label mb-0">Sort by:</label>
                <select class="form-select form-select-sm" id="sortSelect" style="width: auto;">
                    <option value="title">Title A-Z</option>
                    <option value="title_desc">Title Z-A</option>
                    <option value="author">Author A-Z</option>
                    <option value="author_desc">Author Z-A</option>
                    <option value="category">Category</option>
                    <option value="available">Available Copies</option>
                </select>
                <label for="pageSizeSelect" class="form-label mb-0">Show:</label>
                <select class="form-select form-select-sm" id="pageSizeSelect" style="width: auto;">
                    <option value="6">6 per page</option>
                    <option value="12" selected>12 per page</option>
                    <option value="24">24 per page</option>
                    <option value="48">48 per page</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Books Grid View -->
    <div id="gridView" class="row">
        @if (books != null && books.Any())
        {
            foreach (var book in books)
            {
                <div class="col-lg-4 col-md-6 mb-4 book-item" data-title="@book.Title.ToLower()" data-author="@book.Author.ToLower()" data-category="@(book.Category?.CategoryName?.ToLower() ?? "")">
                    <div class="card h-100 shadow-sm hover-card">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-3">
                                <h5 class="card-title text-truncate" title="@book.Title">@book.Title</h5>
                                <span class="badge bg-primary">@book.BookCode</span>
                            </div>
                            
                            <div class="mb-3">
                                <p class="text-muted mb-1">
                                    <i class="fas fa-user me-2"></i><strong>Author:</strong> @book.Author
                                </p>
                                <p class="text-muted mb-1">
                                    <i class="fas fa-tag me-2"></i><strong>Category:</strong> @(book.Category?.CategoryName ?? "N/A")
                                </p>
                                <p class="text-muted mb-1">
                                    <i class="fas fa-barcode me-2"></i><strong>ISBN:</strong> @book.ISBN
                                </p>
                            </div>
                            
                            <div class="row text-center mb-3">
                                <div class="col-6">
                                    <div class="border-end">
                                        <h6 class="text-muted mb-0">Total Copies</h6>
                                        <h5 class="text-primary mb-0">@book.TotalCopies</h5>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <h6 class="text-muted mb-0">Available</h6>
                                    <h5 class="@(book.AvailableCopies > 0 ? "text-success" : "text-danger") mb-0">@book.AvailableCopies</h5>
                                </div>
                            </div>
                            
                            @if (currentUser != null && (currentUser.Role == "ADMIN" || currentUser.Role == "LIBRARIAN"))
                            {
                                <div class="d-grid gap-2">
                                    <a href="@Url.Action("ShowEditForm", "Book", new { id = book.BookId })" class="btn btn-outline-warning btn-sm">
                                        <i class="fas fa-edit me-2"></i>Edit
                                    </a>
                                    <a href="@Url.Action("DeleteBook", "Book", new { id = book.BookId })" 
                                       class="btn btn-outline-danger btn-sm" 
                                       onclick="return confirm('Are you sure you want to delete this book?')">
                                        <i class="fas fa-trash me-2"></i>Delete
                                    </a>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <div class="text-center py-5">
                    <i class="fas fa-book fa-4x text-muted mb-3"></i>
                    <h4 class="text-muted">No books found</h4>
                    <p class="text-muted">Try adjusting your search criteria or add some books to get started.</p>
                </div>
            </div>
        }
    </div>

    <!-- Books Table View -->
    <div id="tableView" class="d-none">
        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th><i class="fas fa-sort me-1"></i>Title</th>
                                <th><i class="fas fa-sort me-1"></i>Author</th>
                                <th><i class="fas fa-sort me-1"></i>Category</th>
                                <th><i class="fas fa-sort me-1"></i>ISBN</th>
                                <th><i class="fas fa-sort me-1"></i>Total</th>
                                <th><i class="fas fa-sort me-1"></i>Available</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (books != null && books.Any())
                            {
                                foreach (var book in books)
                                {
                                    <tr class="book-item" data-title="@book.Title.ToLower()" data-author="@book.Author.ToLower()" data-category="@(book.Category?.CategoryName?.ToLower() ?? "")">
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div>
                                                    <h6 class="mb-0">@book.Title</h6>
                                                    <small class="text-muted">@book.BookCode</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>@book.Author</td>
                                        <td>@(book.Category?.CategoryName ?? "N/A")</td>
                                        <td>@book.ISBN</td>
                                        <td><span class="badge bg-primary">@book.TotalCopies</span></td>
                                        <td>
                                            <span class="badge @(book.AvailableCopies > 0 ? "bg-success" : "bg-danger")">
                                                @book.AvailableCopies
                                            </span>
                                        </td>
                                        <td>
                                            @if (currentUser != null && (currentUser.Role == "ADMIN" || currentUser.Role == "LIBRARIAN"))
                                            {
                                                <div class="btn-group btn-group-sm">
                                                    <a href="@Url.Action("ShowEditForm", "Book", new { id = book.BookId })" class="btn btn-outline-warning">
                                                        <i class="fas fa-edit"></i>
                                                    </a>
                                                    <a href="@Url.Action("DeleteBook", "Book", new { id = book.BookId })" 
                                                       class="btn btn-outline-danger" 
                                                       onclick="return confirm('Are you sure you want to delete this book?')">
                                                        <i class="fas fa-trash"></i>
                                                    </a>
                                                </div>
                                            }
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Pagination -->
    <div class="row mt-4">
        <div class="col-12">
            <nav aria-label="Books pagination">
                <ul class="pagination justify-content-center" id="pagination">
                    <!-- Pagination will be generated by JavaScript -->
                </ul>
            </nav>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    let currentPage = 1;
    let pageSize = 12;
    let currentSort = 'title';
    let currentView = 'grid';
    
    const bookItems = document.querySelectorAll('.book-item');
    const totalItems = bookItems.length;
    const totalPages = Math.ceil(totalItems / pageSize);
    
    // View toggle functionality
    document.getElementById('gridViewBtn').addEventListener('click', function() {
        currentView = 'grid';
        document.getElementById('gridView').classList.remove('d-none');
        document.getElementById('tableView').classList.add('d-none');
        this.classList.add('active');
        document.getElementById('tableViewBtn').classList.remove('active');
        updatePagination();
    });
    
    document.getElementById('tableViewBtn').addEventListener('click', function() {
        currentView = 'table';
        document.getElementById('tableView').classList.remove('d-none');
        document.getElementById('gridView').classList.add('d-none');
        this.classList.add('active');
        document.getElementById('gridViewBtn').classList.remove('active');
        updatePagination();
    });
    
    // Sort functionality
    document.getElementById('sortSelect').addEventListener('change', function() {
        currentSort = this.value;
        sortBooks();
        currentPage = 1;
        updatePagination();
    });
    
    // Page size functionality
    document.getElementById('pageSizeSelect').addEventListener('change', function() {
        pageSize = parseInt(this.value);
        currentPage = 1;
        updatePagination();
    });
    
    // Search functionality
    const searchInputs = document.querySelectorAll('input[name="title"], input[name="author"], input[name="isbn"], input[name="category"]');
    searchInputs.forEach(input => {
        input.addEventListener('input', function() {
            filterBooks();
            currentPage = 1;
            updatePagination();
        });
    });
    
    function sortBooks() {
        const items = Array.from(bookItems);
        
        items.sort((a, b) => {
            let aValue, bValue;
            
            switch(currentSort) {
                case 'title':
                    aValue = a.dataset.title;
                    bValue = b.dataset.title;
                    return aValue.localeCompare(bValue);
                case 'title_desc':
                    aValue = a.dataset.title;
                    bValue = b.dataset.title;
                    return bValue.localeCompare(aValue);
                case 'author':
                    aValue = a.dataset.author;
                    bValue = b.dataset.author;
                    return aValue.localeCompare(bValue);
                case 'author_desc':
                    aValue = a.dataset.author;
                    bValue = b.dataset.author;
                    return bValue.localeCompare(aValue);
                case 'category':
                    aValue = a.dataset.category;
                    bValue = b.dataset.category;
                    return aValue.localeCompare(bValue);
                case 'available':
                    aValue = parseInt(a.querySelector('.text-success, .text-danger').textContent) || 0;
                    bValue = parseInt(b.querySelector('.text-success, .text-danger').textContent) || 0;
                    return bValue - aValue;
                default:
                    return 0;
            }
        });
        
        // Reorder items in DOM
        const container = currentView === 'grid' ? document.getElementById('gridView') : document.querySelector('#tableView tbody');
        items.forEach(item => {
            container.appendChild(item);
        });
    }
    
    function filterBooks() {
        const titleFilter = document.querySelector('input[name="title"]').value.toLowerCase();
        const authorFilter = document.querySelector('input[name="author"]').value.toLowerCase();
        const isbnFilter = document.querySelector('input[name="isbn"]').value.toLowerCase();
        const categoryFilter = document.querySelector('input[name="category"]').value.toLowerCase();
        
        bookItems.forEach(item => {
            const title = item.dataset.title;
            const author = item.dataset.author;
            const category = item.dataset.category;
            const isbn = item.querySelector('i.fa-barcode').parentElement.textContent.toLowerCase();
            
            const matchesTitle = title.includes(titleFilter);
            const matchesAuthor = author.includes(authorFilter);
            const matchesIsbn = isbn.includes(isbnFilter);
            const matchesCategory = category.includes(categoryFilter);
            
            if (matchesTitle && matchesAuthor && matchesIsbn && matchesCategory) {
                item.style.display = '';
            } else {
                item.style.display = 'none';
            }
        });
    }
    
    function updatePagination() {
        const visibleItems = Array.from(bookItems).filter(item => item.style.display !== 'none');
        const totalVisiblePages = Math.ceil(visibleItems.length / pageSize);
        
        const pagination = document.getElementById('pagination');
        pagination.innerHTML = '';
        
        if (totalVisiblePages <= 1) return;
        
        // Previous button
        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
        prevLi.innerHTML = `<a class="page-link" href="#" data-page="${currentPage - 1}">Previous</a>`;
        pagination.appendChild(prevLi);
        
        // Page numbers
        for (let i = 1; i <= totalVisiblePages; i++) {
            const li = document.createElement('li');
            li.className = `page-item ${i === currentPage ? 'active' : ''}`;
            li.innerHTML = `<a class="page-link" href="#" data-page="${i}">${i}</a>`;
            pagination.appendChild(li);
        }
        
        // Next button
        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${currentPage === totalVisiblePages ? 'disabled' : ''}`;
        nextLi.innerHTML = `<a class="page-link" href="#" data-page="${currentPage + 1}">Next</a>`;
        pagination.appendChild(nextLi);
        
        // Add click event listeners
        pagination.addEventListener('click', function(e) {
            e.preventDefault();
            if (e.target.classList.contains('page-link')) {
                const page = parseInt(e.target.dataset.page);
                if (page >= 1 && page <= totalVisiblePages) {
                    currentPage = page;
                    showPage();
                    updatePagination();
                }
            }
        });
        
        showPage();
    }
    
    function showPage() {
        const visibleItems = Array.from(bookItems).filter(item => item.style.display !== 'none');
        const startIndex = (currentPage - 1) * pageSize;
        const endIndex = startIndex + pageSize;
        
        visibleItems.forEach((item, index) => {
            if (index >= startIndex && index < endIndex) {
                item.style.display = '';
            } else {
                item.style.display = 'none';
            }
        });
    }
    
    // Initialize
    updatePagination();
});
</script> 