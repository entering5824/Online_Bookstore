

# ---- C:\Users\phamt\source\repos\Online_Bookstore\Online_Bookstore\Services\ActivityLogService.cs ----

Ôªøusing System.Collections.Generic;
using Online_Bookstore.Models;
using Online_Bookstore.Repository;

namespace Online_Bookstore.Services
{
    public class ActivityLogService
    {
        private readonly ActivityLogRepository _activityLogRepository;

        public ActivityLogService()
        {
            _activityLogRepository = new ActivityLogRepository();
        }

        public List<ActivityLog> GetAllActivityLogs()
        {
            return _activityLogRepository.GetAll();
        }

        public ActivityLog GetActivityLogById(int id)
        {
            return _activityLogRepository.GetById(id);
        }

        public void SaveActivityLog(ActivityLog log)
        {
            _activityLogRepository.Save(log);
        }

        public void DeleteActivityLog(int id)
        {
            _activityLogRepository.Delete(id);
        }
    }
}


# ---- C:\Users\phamt\source\repos\Online_Bookstore\Online_Bookstore\Services\BookCategoryService.cs ----

Ôªøusing System.Collections.Generic;
using Online_Bookstore.Models;
using Online_Bookstore.Repository;

namespace Online_Bookstore.Services
{
    public class BookCategoryService
    {
        private readonly BookCategoryRepository _bookCategoryRepository;

        public BookCategoryService()
        {
            _bookCategoryRepository = new BookCategoryRepository();
        }

        public List<BookCategory> GetAllCategories()
        {
            return _bookCategoryRepository.GetAll();
        }

        public BookCategory GetCategoryById(int id)
        {
            return _bookCategoryRepository.GetById(id);
        }

        public void SaveCategory(BookCategory category)
        {
            _bookCategoryRepository.Save(category);
        }

        public void DeleteCategory(int id)
        {
            _bookCategoryRepository.Delete(id);
        }

        public BookCategory FindByCategoryName(string name)
        {
            return _bookCategoryRepository.FindByCategoryName(name);
        }
    }
}


# ---- C:\Users\phamt\source\repos\Online_Bookstore\Online_Bookstore\Services\BookService.cs ----

Ôªøusing Online_Bookstore.Models;
using Online_Bookstore.Repository;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Online_Bookstore.Services
{
    public class BookService
    {
        private readonly BookRepository _bookRepository;

        public BookService()
        {
            _bookRepository = new BookRepository();
        }

        // L·∫•y t·∫•t c·∫£ s√°ch
        public List<Book> GetAllBooks()
        {
            return _bookRepository.GetAll();
        }

        // L·∫•y s√°ch theo Id
        public Book GetBookById(int id)
        {
            return _bookRepository.GetById(id);
        }

        // L∆∞u (th√™m/c·∫≠p nh·∫≠t) s√°ch
        public Book SaveBook(Book book)
        {
            return _bookRepository.Save(book);
        }

        // X√≥a s√°ch
        public void DeleteBook(int id)
        {
            _bookRepository.Delete(id);
        }

        // T√¨m s√°ch theo ISBN
        public Book FindByIsbn(string isbn)
        {
            return _bookRepository.FindByIsbn(isbn);
        }

        // T√¨m s√°ch theo ti√™u ƒë·ªÅ
        public List<Book> SearchByTitle(string title)
        {
            return _bookRepository.FindByTitleContaining(title);
        }

        // T√¨m s√°ch theo t√°c gi·∫£
        public List<Book> SearchByAuthor(string author)
        {
            return _bookRepository.FindByAuthorContaining(author);
        }

        // T√¨m s√°ch theo ISBN nh∆∞ng tr·∫£ v·ªÅ List (d√πng cho t√¨m ki·∫øm)
        public List<Book> SearchByIsbn(string isbn)
        {
            var book = _bookRepository.FindByIsbn(isbn);
            return book != null ? new List<Book> { book } : new List<Book>();
        }

        // T√¨m s√°ch theo t√™n th·ªÉ lo·∫°i
        public List<Book> SearchByCategory(string categoryName)
        {
            return _bookRepository.FindByCategoryName(categoryName);
        }

        // üìä Th·ªëng k√™ s√°ch theo th·ªÉ lo·∫°i
        public Dictionary<string, long> GetBooksByCategory()
        {
            var books = GetAllBooks();

            return books
                .GroupBy(b => b.Category != null ? b.Category.CategoryName : "Kh√¥ng ph√¢n lo·∫°i")
                .ToDictionary(g => g.Key, g => (long)g.Count());
        }

        // üìä Th·ªëng k√™ s√°ch theo t√¨nh tr·∫°ng c√≥ s·∫µn
        public List<Dictionary<string, object>> GetBooksByAvailability()
        {
            var books = GetAllBooks();

            var availabilityStats = books
                .GroupBy(b => b.AvailableCopies > 0 ? "C√≥ s·∫µn" : "H·∫øt s√°ch")
                .ToDictionary(g => g.Key, g => (long)g.Count());

            return availabilityStats.Select(entry => new Dictionary<string, object>
            {
                { "status", entry.Key },
                { "count", entry.Value }
            }).ToList();
        }
    }
}


# ---- C:\Users\phamt\source\repos\Online_Bookstore\Online_Bookstore\Services\BorrowRecordService.cs ----

Ôªøusing Online_Bookstore.Models;
using Online_Bookstore.Repository;
using System;
using System.Collections.Generic;
using System.Linq;

namespace OnlineBookstore.Services
{
    public class BorrowRecordService
    {
        private readonly BorrowRecordRepository _borrowRecordRepository;
        private readonly UserRepository _userRepository;
        private readonly BookRepository _bookRepository;

        public BorrowRecordService()
        {
            _borrowRecordRepository = new BorrowRecordRepository();
            _userRepository = new UserRepository();
            _bookRepository = new BookRepository();
        }

        public List<BorrowRecord> GetAllBorrowRecords()
        {
            return _borrowRecordRepository.FindAll();
        }

        public BorrowRecord GetBorrowRecordById(int id)
        {
            var record = _borrowRecordRepository.FindById(id);
            if (record == null)
                throw new Exception($"Kh√¥ng t√¨m th·∫•y BorrowRecord v·ªõi ID: {id}");
            return record;
        }

        public void SaveBorrowRecord(BorrowRecord record)
        {
            // Ki·ªÉm tra User
            if (record.User != null && record.User.UserId != 0)
            {
                var user = _userRepository.FindById(record.User.UserId);
                if (user == null)
                    throw new Exception($"Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: {record.User.UserId}");
                record.User = user;
            }

            // Ki·ªÉm tra Book
            if (record.Book != null && record.Book.BookId != 0)
            {
                var book = _bookRepository.FindById(record.Book.BookId);
                if (book == null)
                    throw new Exception($"Kh√¥ng t√¨m th·∫•y s√°ch v·ªõi ID: {record.Book.BookId}");
                record.Book = book;
            }

            _borrowRecordRepository.Save(record);
        }

        public void DeleteBorrowRecord(int id)
        {
            _borrowRecordRepository.Delete(id);
        }

        public List<(Book, int)> GetTopBorrowedBooks(int limit)
        {
            var all = _borrowRecordRepository.FindTopBorrowedBooks();
            return all.Take(limit).ToList();
        }

        public Dictionary<string, long> GetBorrowRecordsByStatus()
        {
            var records = GetAllBorrowRecords();
            return records.GroupBy(r => string.IsNullOrEmpty(r.Status) ? "Kh√¥ng x√°c ƒë·ªãnh" : r.Status)
                          .ToDictionary(g => g.Key, g => (long)g.Count());
        }

        // C√°c h√†m ch∆∞a h·ªó tr·ª£
        public List<Dictionary<string, object>> GetTopActiveUsers(int limit)
        {
            throw new NotImplementedException();
        }

        public List<Dictionary<string, object>> GetBorrowRecordsByMonth()
        {
            throw new NotImplementedException();
        }

        public List<Dictionary<string, object>> GetOverdueBooks()
        {
            throw new NotImplementedException();
        }
    }
}


# ---- C:\Users\phamt\source\repos\Online_Bookstore\Online_Bookstore\Services\DigitalResourceService.cs ----

Ôªøusing Online_Bookstore.Models;
using OnlineBookstore.Repository;
using System;
using System.Collections.Generic;
using System.Linq;

namespace OnlineBookstore.Services
{
    public class DigitalResourceService
    {
        private readonly DigitalResourceRepository _digitalResourceRepo;
        private readonly BookRepository _bookRepo;

        public DigitalResourceService(DigitalResourceRepository digitalResourceRepo, BookRepository bookRepo)
        {
            _digitalResourceRepo = digitalResourceRepo;
            _bookRepo = bookRepo;
        }

        public List<DigitalResource> GetAllDigitalResources()
        {
            return _digitalResourceRepo.FindAll();
        }

        public DigitalResource GetDigitalResourceById(int id)
        {
            var resource = _digitalResourceRepo.FindById(id);
            if (resource == null)
                throw new Exception($"Kh√¥ng t√¨m th·∫•y t√†i nguy√™n s·ªë v·ªõi ID: {id}");
            return resource;
        }

        public void SaveDigitalResource(DigitalResource resource)
        {
            if (resource.Book != null && resource.Book.BookId != 0)
            {
                var book = _bookRepo.FindById(resource.Book.BookId);
                if (book == null)
                    throw new Exception($"Kh√¥ng t√¨m th·∫•y s√°ch v·ªõi ID: {resource.Book.BookId}");
                resource.Book = book;
            }

            _digitalResourceRepo.Save(resource);
        }

        public void DeleteDigitalResource(int id)
        {
            _digitalResourceRepo.Delete(id);
        }
    }
}


# ---- C:\Users\phamt\source\repos\Online_Bookstore\Online_Bookstore\Services\EmailService.cs ----

Ôªøusing System.Net;
using System.Net.Mail;
using System.Threading.Tasks;

namespace Online_Bookstore.Services
{
    public class EmailService
    {
        private readonly string _fromEmail = "your_email@gmail.com";
        private readonly string _password = "your_app_password";

        public async Task SendEmailAsync(string to, string subject, string body)
        {
            using (var client = new SmtpClient("smtp.gmail.com", 587))
            {
                client.Credentials = new NetworkCredential(_fromEmail, _password);
                client.EnableSsl = true;

                var mailMessage = new MailMessage();
                mailMessage.From = new MailAddress(_fromEmail);
                mailMessage.To.Add(to);
                mailMessage.Subject = subject;
                mailMessage.Body = body;

                await client.SendMailAsync(mailMessage);
            }
        }
    }
}


# ---- C:\Users\phamt\source\repos\Online_Bookstore\Online_Bookstore\Services\NotificationService.cs ----

Ôªøusing Online_Bookstore.Models;
using Online_Bookstore.Repositoriy;
using System;
using System.Collections.Generic;

namespace Online_Bookstore.Services
{
    public class NotificationService
    {
        private readonly NotificationRepository _notificationRepo;
        private readonly UserRepository _userRepo;

        public NotificationService(NotificationRepository notificationRepo, UserRepository userRepo)
        {
            _notificationRepo = notificationRepo;
            _userRepo = userRepo;
        }

        public List<Notification> GetAllNotifications()
        {
            return _notificationRepo.FindAll();
        }

        public Notification GetNotificationById(int id)
        {
            var notification = _notificationRepo.FindById(id);
            if (notification == null)
                throw new Exception($"Kh√¥ng t√¨m th·∫•y th√¥ng b√°o v·ªõi ID: {id}");
            return notification;
        }

        public void SaveNotification(Notification notification)
        {
            if (notification.User != null && notification.User.UserId != 0)
            {
                var user = _userRepo.FindById(notification.User.UserId);
                if (user == null)
                    throw new Exception($"Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: {notification.User.UserId}");
                notification.User = user;
            }

            _notificationRepo.Save(notification);
        }

        public void DeleteNotification(int id)
        {
            _notificationRepo.Delete(id);
        }
    }
}


# ---- C:\Users\phamt\source\repos\Online_Bookstore\Online_Bookstore\Services\ReservationService.cs ----

Ôªøusing Online_Bookstore.Models;
using Online_Bookstore.Repositories;
using Online_Bookstore.Repository;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Online_Bookstore.Web.Services
{
    public class ReservationService
    {
        private readonly ReservationRepository _reservationRepo;
        private readonly UserRepository _userRepo;
        private readonly BookRepository _bookRepo;

        public ReservationService(
            ReservationRepository reservationRepo,
            UserRepository userRepo,
            BookRepository bookRepo)
        {
            _reservationRepo = reservationRepo;
            _userRepo = userRepo;
            _bookRepo = bookRepo;
        }

        public List<Reservation> GetAllReservations()
        {
            return _reservationRepo.FindAll();
        }

        public Reservation GetReservationById(int id)
        {
            var res = _reservationRepo.FindById(id);
            if (res == null)
                throw new Exception($"Kh√¥ng t√¨m th·∫•y reservation v·ªõi ID: {id}");
            return res;
        }

        public void SaveReservation(Reservation reservation)
        {
            if (reservation.User != null && reservation.User.UserId != 0)
            {
                var user = _userRepo.FindById(reservation.User.UserId);
                if (user == null)
                    throw new Exception($"Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: {reservation.User.UserId}");
                reservation.User = user;
            }

            if (reservation.Book != null && reservation.Book.BookId != 0)
            {
                var book = _bookRepo.FindById(reservation.Book.BookId);
                if (book == null)
                    throw new Exception($"Kh√¥ng t√¨m th·∫•y s√°ch v·ªõi ID: {reservation.Book.BookId}");
                reservation.Book = book;
            }

            _reservationRepo.Save(reservation);
        }

        public void DeleteReservation(int id)
        {
            _reservationRepo.Delete(id);
        }

        public List<object[]> GetTopReservedBooks(int limit)
        {
            var all = _reservationRepo.FindTopReservedBooks();
            return all.Count > limit ? all.Take(limit).ToList() : all;
        }

        public Dictionary<string, long> GetReservationsByStatus()
        {
            return _reservationRepo.FindAll()
                .GroupBy(r => string.IsNullOrEmpty(r.Status) ? "Kh√¥ng x√°c ƒë·ªãnh" : r.Status)
                .ToDictionary(g => g.Key, g => (long)g.Count());
        }
    }
}


# ---- C:\Users\phamt\source\repos\Online_Bookstore\Online_Bookstore\Services\SystemSettingService.cs ----

Ôªøusing Online_Bookstore.Models;
using Online_Bookstore.Repository;
using System;
using System.Collections.Generic;

namespace OnlineBookstore.Web.Services
{
    public class SystemSettingService
    {
        private readonly SystemSettingRepository _settingRepo;

        public SystemSettingService(SystemSettingRepository settingRepo)
        {
            _settingRepo = settingRepo;
        }

        public List<SystemSetting> GetAllSettings()
        {
            return _settingRepo.FindAll();
        }

        public SystemSetting GetSettingBySettingKey(string SettingKey)
        {
            var setting = _settingRepo.FindById(SettingKey);
            if (setting == null)
                throw new Exception($"Kh√¥ng t√¨m th·∫•y setting v·ªõi SettingKey: {SettingKey}");
            return setting;
        }

        public void SaveSetting(SystemSetting setting)
        {
            _settingRepo.Save(setting);
        }

        public void DeleteSetting(string SettingKey)
        {
            _settingRepo.Delete(SettingKey);
        }
    }
}


# ---- C:\Users\phamt\source\repos\Online_Bookstore\Online_Bookstore\Services\UserService.cs ----

Ôªøusing Online_Bookstore.Models;
using Online_Bookstore.Repository;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Online_Bookstore.Services
{
    public class UserService
    {
        private readonly UserRepository _userRepo;

        public UserService(UserRepository userRepo)
        {
            _userRepo = userRepo;
        }

        public List<User> GetAllUsers()
        {
            return _userRepo.FindAll();
        }

        public User GetUserById(int id)
        {
            var user = _userRepo.FindById(id);
            if (user == null)
                throw new Exception($"Kh√¥ng t√¨m th·∫•y user v·ªõi ID: {id}");
            return user;
        }

        public void SaveUser(User user)
        {
            _userRepo.Save(user);
        }

        public void DeleteUser(int id)
        {
            _userRepo.Delete(id);
        }

        public User FindByUsername(string username)
        {
            return _userRepo.FindByUsername(username);
        }

        public User FindByEmail(string email)
        {
            return _userRepo.FindByEmail(email);
        }

        public Dictionary<string, long> GetUsersByRole()
        {
            var users = GetAllUsers();
            return users
                .GroupBy(u => string.IsNullOrEmpty(u.Role) ? "Kh√¥ng x√°c ƒë·ªãnh" : u.Role)
                .ToDictionary(g => g.Key, g => (long)g.Count());
        }

        public List<Dictionary<string, object>> GetUserRegistrationByMonth()
        {
            throw new NotImplementedException();
        }
    }
}
